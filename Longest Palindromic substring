class Solution {
    string expandAroundCenter(const string &s, int left, int right) {
        int n = s.length();
        while (left >= 0 && right < n && s[left] == s[right]) {
            left--;
            right++;
        }
        // When the while loop exits, left and right are one step beyond the palindrome bounds.
        return s.substr(left + 1, right - left - 1);
    }

public:
    string longestPalindrome(string s) {
        int n = s.length();
        if (n <= 1) return s;

        string maxString;
        for (int i = 0; i < n; i++) {
            // Check for odd-length palindromes centered at s[i]
            string oddPalindrome = expandAroundCenter(s, i, i);
            if (oddPalindrome.length() > maxString.length()) {
                maxString = oddPalindrome;
            }

            // Check for even-length palindromes centered between s[i] and s[i+1]
            string evenPalindrome = expandAroundCenter(s, i, i + 1);
            if (evenPalindrome.length() > maxString.length()) {
                maxString = evenPalindrome;
            }
        }

        return maxString;
    }
};

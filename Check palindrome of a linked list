class Solution {
public:
ListNode* reverseList(ListNode* head) {
       if(head==nullptr || head->next==nullptr) return head;
      ListNode* newHead = reverseList(head->next);
    
    ListNode* front = head->next;
     front->next = head;
    head->next = NULL;

    return newHead;
    }
    bool isPalindrome(ListNode* head) {
        ListNode* s=head;
        ListNode* f=head;
        while(f->next!=nullptr && f->next->next!=nullptr){
            s=s->next;
            f=f->next->next;
            
         }
        ListNode* node=head;
         ListNode* newnode=reverseList(s->next);
          while(newnode!=NULL && node!=newnode){
            if(node->val !=newnode->val) return false;
            node=node->next;
            newnode=newnode->next;
          }
    return true;
    }
};
